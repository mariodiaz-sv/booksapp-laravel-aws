name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-test-push:
    name: Build, Test, Push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      #- name: Run Tests
      #  run: vendor/bin/phpunit
      
      - name: Verificar Docker Compose en EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker -v
            docker compose version

      
      - name: üöÄ Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üëâ Iniciando despliegue en EC2..."

            # Asegura que Docker est√© activo
            sudo systemctl start docker
            
            # Detiene y elimina contenedores e im√°genes antiguos
            echo "üõë Deteniendo y limpiando contenedores..."
            docker ps -q | xargs -r docker stop
            docker system prune -a -f --volumes

            # Elimina el proyecto anterior
            echo "üßπ Eliminando proyecto anterior..."
            rm -rf /var/www/html/booksapp-laravel-aws

            # Prepara el directorio base
            sudo mkdir -p /var/www/html
            sudo chown -R ubuntu:ubuntu /var/www/html

            # Entra al directorio
            cd /var/www/html

            # Clona la √∫ltima versi√≥n del repositorio
            echo "üì• Clonando repositorio..."
            git clone https://github.com/mariodiaz-sv/booksapp-laravel-aws.git

            # Verifica y mueve el archivo .env.production si existe
            echo "üîç Verificando existencia de /home/ubuntu/.env.production..."
            if [ -f /home/ubuntu/.env.production ]; then
            # Copia el archivo .env dentro del contenedor como .env
            echo "üìÑ Copiando .env.production a la instancia..."
              cp /home/ubuntu/.env.production /var/www/html/booksapp-laravel-aws/.env.production
            else
              echo "‚ùå ERROR: El archivo .env.production no existe en /home/ubuntu"
              exit 1
            fi

            # Entra al proyecto clonado
            cd booksapp-laravel-aws

            # Verifica que docker-compose.prod.yml existe
            if [ ! -f docker-compose.prod.yml ]; then
              echo "‚ùå Error: docker-compose.prod.yml no encontrado."
              exit 1
            fi
            # Crea certificados SSL auto-firmados si no existen
            echo "üîê Generando certificados SSL auto-firmados..."
            mkdir -p docker/nginx/certs

            if [ ! -f docker/nginx/certs/selfsigned.crt ] || [ ! -f docker/nginx/certs/selfsigned.key ]; then
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout docker/nginx/certs/selfsigned.key \
                -out docker/nginx/certs/selfsigned.crt \
                -subj "/C=US/ST=Test/L=Local/O=Test/CN=52.91.1.230"
              echo "‚úÖ Certificados generados en docker/nginx/certs/"
            else
              echo "üîÅ Certificados SSL ya existen, omitiendo generaci√≥n..."
            fi
            
            # Despliega con Docker Compose en modo producci√≥n
            echo "üöÄ Levantando contenedores de producci√≥n..."
            docker compose -f docker-compose.prod.yml up -d --build

            # Espera unos segundos para asegurar que los contenedores est√©n listos
            sleep 10

            # Ejecuta composer install dentro del contenedor Laravel
            echo "üì¶ Instalando dependencias de Laravel en producci√≥n..."
            docker exec booksapp-laravel-prod composer install --no-dev --optimize-autoloader

            # Ajusta permisos para Laravel
            echo "Ajustando permisos..."
            docker exec booksapp-laravel-prod chown -R www-data:www-data /var/www/html
            docker exec booksapp-laravel-prod chmod -R 755 /var/www/html
            # Verifica que vendor/autoload.php existe
            echo "‚úÖ Verificando que autoload.php exista"
            docker exec booksapp-laravel-prod ls -l /var/www/html/vendor/autoload.php
            # Copia el archivo .env dentro del contenedor como .env
            echo "üìÑ Copiando .env.production dentro del contenedor como .env..."
            docker cp /var/www/html/booksapp-laravel-aws/.env.production booksapp-laravel-prod:/var/www/html/.env

            # Genera la clave de aplicaci√≥n
            echo "üîë Generando APP_KEY..."
            docker exec booksapp-laravel-prod php artisan key:generate

            # Cachea la configuraci√≥n
            echo "‚öôÔ∏è Cacheando configuraci√≥n..."
            docker exec booksapp-laravel-prod php artisan config:cache

            # Reinicia el contenedor para aplicar cambios
            echo "üîÅ Reiniciando contenedor Laravel..."
            docker restart booksapp-laravel-prod

            echo "‚úÖ Despliegue finalizado correctamente."

