name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-test-push:
    name: Build, Test, Push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      #- name: Run Tests
      #  run: vendor/bin/phpunit
      
      - name: Verificar Docker Compose en EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker -v
            docker compose version

      
      - name: 🚀 Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "👉 Iniciando despliegue en EC2..."

            # Asegura que Docker esté activo
            sudo systemctl start docker
            
            # Detiene y elimina contenedores e imágenes antiguos
            echo "🛑 Deteniendo y limpiando contenedores..."
            docker ps -q | xargs -r docker stop
            docker system prune -a -f --volumes

            # Elimina el proyecto anterior
            echo "🧹 Eliminando proyecto anterior..."
            sudo rm -rf /var/www/html/booksapp-laravel-aws

            # Prepara el directorio base
            sudo mkdir -p /var/www/html
            sudo chown -R ubuntu:ubuntu /var/www/html

            # Entra al directorio
            cd /var/www/html

            # Clona la última versión del repositorio
            echo "📥 Clonando repositorio..."
            git clone https://github.com/mariodiaz-sv/booksapp-laravel-aws.git

            # Verifica y mueve el archivo .env.production si existe
            echo "🔍 Verificando existencia de /home/ubuntu/.env.production..."
            if [ -f /home/ubuntu/.env.production ]; then
            # Copia el archivo .env dentro del contenedor como .env
            echo "📄 Copiando .env.production a la instancia..."
              cp /home/ubuntu/.env.production /var/www/html/booksapp-laravel-aws/.env.production
            else
              echo "❌ ERROR: El archivo .env.production no existe en /home/ubuntu"
              exit 1
            fi

            # Entra al proyecto clonado
            cd booksapp-laravel-aws

            # Verifica que docker-compose.prod.yml existe
            if [ ! -f docker-compose.prod.yml ]; then
              echo "❌ Error: docker-compose.prod.yml no encontrado."
              exit 1
            fi
            # Crea certificados SSL auto-firmados si no existen
            echo "🔐 Generando certificados SSL auto-firmados..."
            mkdir -p docker/nginx/certs

            if [ ! -f docker/nginx/certs/selfsigned.crt ] || [ ! -f docker/nginx/certs/selfsigned.key ]; then
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout docker/nginx/certs/selfsigned.key \
                -out docker/nginx/certs/selfsigned.crt \
                -subj "/C=US/ST=Test/L=Local/O=Test/CN=52.91.1.230"
              echo "✅ Certificados generados en docker/nginx/certs/"
            else
              echo "🔁 Certificados SSL ya existen, omitiendo generación..."
            fi
            echo "🔍 Archivos generados:"
            ls -l docker/nginx/certs
            
            # Despliega con Docker Compose en modo producción
            echo "🚀 Levantando contenedores de producción..."
            docker compose -f docker-compose.prod.yml up -d --build

            # Espera unos segundos para asegurar que los contenedores estén listos
            sleep 10

            # Ejecuta composer install dentro del contenedor Laravel
            echo "📦 Instalando dependencias de Laravel en producción..."
            docker exec booksapp-laravel-prod composer install --no-dev --optimize-autoloader

            # Ajusta permisos para Laravel
            echo "Ajustando permisos..."
            docker exec booksapp-laravel-prod chown -R www-data:www-data /var/www/html
            docker exec booksapp-laravel-prod chmod -R 755 /var/www/html
            # Verifica que vendor/autoload.php existe
            echo "✅ Verificando que autoload.php exista"
            docker exec booksapp-laravel-prod ls -l /var/www/html/vendor/autoload.php
            # Copia el archivo .env dentro del contenedor como .env
            echo "📄 Copiando .env.production dentro del contenedor como .env..."
            docker cp /var/www/html/booksapp-laravel-aws/.env.production booksapp-laravel-prod:/var/www/html/.env

            # Genera la clave de aplicación
            echo "🔑 Generando APP_KEY..."
            docker exec booksapp-laravel-prod php artisan key:generate

            # Cachea la configuración
            echo "⚙️ Cacheando configuración..."
            docker exec booksapp-laravel-prod php artisan config:cache
            docker exec booksapp-laravel-prod php artisan migrate --force

            # Reinicia el contenedor para aplicar cambios
            echo "🔁 Reiniciando contenedor Laravel..."
            docker restart booksapp-laravel-prod

            echo "✅ Despliegue finalizado correctamente."

  notify:
    name: 📢 Notificar a Discord
    needs: build-test-push
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 🔧 Preparar contenido para Discord
        id: prepare
        run: |
          if [ "${{ needs.build-test-push.result }}" = "success" ]; then
            TITLE="✅ Despliegue exitoso en EC2"
            DESCRIPTION="**booksapp-laravel-aws** ha sido desplegado correctamente en AWS EC2 🎉"
            COLOR=65280
          else
            TITLE="❌ Error en el despliegue en EC2"
            DESCRIPTION="Se produjo un error durante el despliegue de **booksapp-laravel-aws** en EC2."
            COLOR=16711680
          fi

          EMBED_JSON=$(jq -nc --arg title "$TITLE" \
                      --arg description "$DESCRIPTION" \
                      --arg timestamp "${{ github.event.head_commit.timestamp }}" \
                      --arg commit "${{ github.event.head_commit.message }}" \
                      --arg author "${{ github.event.head_commit.author.name }}" \
                      --arg url "${{ github.event.head_commit.url }}" \
                      '[
                          {
                            title: $title,
                            description: $description,
                            color: '"$COLOR"',
                            fields: [
                              {
                                name: "📘 Repositorio",
                                value: "[mariodiaz-sv/booksapp-laravel-aws](https://github.com/mariodiaz-sv/booksapp-laravel-aws)",
                                inline: true
                              },
                              {
                                name: "🕒 Fecha",
                                value: $timestamp,
                                inline: true
                              },
                              {
                                name: "🔁 Commit",
                                value: $commit
                              },
                              {
                                name: "👤 Autor",
                                value: $author,
                                inline: true
                              },
                              {
                                name: "🔗 Ver commit",
                                value: "[Click aquí](\($url))",
                                inline: true
                              }
                            ],
                            footer: {
                              text: "GitHub Actions - Laravel EC2 Deploy",
                              icon_url: "https://avatars.githubusercontent.com/u/44036562?s=200&v=4"
                            }
                          }
                        ]')

          echo "embeds=$EMBED_JSON" >> $GITHUB_OUTPUT

      - name: 📢 Notificación en Discord
        uses: tsickert/discord-webhook@v5.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          username: 'GitHub Actions 🤖APP'
          avatar-url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'
          embeds: ${{ steps.prepare.outputs.embeds }}
